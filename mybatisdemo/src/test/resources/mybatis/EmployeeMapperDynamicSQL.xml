<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- 
		if:判断
		choose (when, otherwise) 分支选择  swtich-case
			如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个
		trim 字符串截取(where(封装查询条件), set(封装修改方法))
		foreach
	 -->
	 <!-- 查询员工，要求，携带了哪个字段，查询条件就带上了哪个字段的值 -->
	 <!-- public  List<Employee> getEmpsByConditionIf(Employee employee); -->
	 <select id="getEmpsByConditionIf" resultType="employee">
	 	select * from tbl_employee
	 	where 
	 	<!-- test:判断表达式(OGNL)百度搜索
	 	 c:if test
	 	 从参数中取值判断
	 	 -->
	 	<if test="id!=null">
	 		id=#{id}
	 	</if>
	 	<if test="lastName!=null">
	 		and last_name like #{lastName}
	 	</if>
	 	<if test="email!=null">
	 		and email=#{email}
	 	</if>
	 	<!-- OGNL会自动转换数字 -->
	 	<if test="gender==0 or gender==1">
	 		and gender=#{gender}
	 	</if>
	 </select>
	 
	 <!-- public  List<Employee> getEmpsByConditionTrim(Employee employee); -->
	 <select id="getEmpsByConditionTrim" resultType="employee">
	 	select * from tbl_employee
	 	<!-- test:判断表达式(OGNL)百度搜索
	 	 c:if test
	 	 从参数中取值判断
	 	 -->
	 	 <!-- 后面多出的and或者or where标签不能解决
	 	 	prefix="":前缀：trim标签体中是整个字符串拼串后的结果。
	 	 			prefix给拼串后的整个字符串加一个前缀
	 	 	prefixOverrides="":前缀覆盖：去掉整个字符串前面多余的字符
	 	 	suffix=""：后缀
	 	 			suffix给拼串后的整个字符串加一个后缀
	 	 	suffixOverrides="":后缀覆盖：去掉整个字符串后面多余的字符
	 	  -->
	 	  <!-- 自定义字符串的截取规则 -->
	 	 <trim prefix="where" suffixOverrides="and">
		 	<if test="id!=null">
		 		id=#{id} and 
		 	</if>
		 	<if test="lastName!=null">
		 		last_name like #{lastName} and 
		 	</if>
		 	<if test="email!=null">
		 		email=#{email} and 
		 	</if>
		 	<!-- OGNL会自动转换数字 -->
		 	<if test="gender==0 or gender==1">
		 		gender=#{gender}
		 	</if>
	 	</trim>
	 </select>
	 
	 <!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	 <select id="getEmpsByConditionChoose" resultType="employee">
	 	select * from tbl_employee
	 	<where>
	 		<!-- 如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个 -->
	 		<choose>
	 			<when test="id!=null">
	 				id=#{id}
	 			</when>
	 			<when test="lastName!=null">
	 				last_name like #{lastName}
	 			</when>
	 			<when test="email!=null">
	 				email = #{email}
	 			</when>
	 			<otherwise>
	 				gender=0
	 			</otherwise>
	 		</choose>
	 	</where>
	 </select>
	 
	 <!-- public void updateEmp(Employee employee); -->
	 <update id="updateEmp">
	 	<!-- set标签的使用 -->
	 	UPDATE `tbl_employee` 
		<set>
			<if test="lastName!=null">
				`last_name`=#{lastName}, 
			</if>
			<if test="email!=null">
				`email`=#{email},
			</if>
			<if test="gender!=null">
				`gender`=#{gender},
			</if>
		</set>
		WHERE `id`=#{id}
		
		<!-- 
		Trim:更新拼串
		UPDATE `tbl_employee` 
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				`last_name`=#{lastName}, 
			</if>
			<if test="email!=null">
				`email`=#{email},
			</if>
			<if test="gender!=null">
				`gender`=#{gender},
			</if>
		</trim>
		WHERE `id`=#{id} -->
	 </update>
	 
	 <!-- public List<Employee> getEmpsByConditionForeach(List<Integer> list); -->
	 <select id="getEmpsByConditionForeach" resultType="employee">
	 	select * from tbl_employee where id in 
	 	<!-- 
	 		collection:指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中,map的key就叫list
	 		item:将当前遍历出的元素赋值给指定变量
	 		separator：每个元素的分隔符
	 		open:遍历出所有结果拼接一个开始的字符
	 		close：遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候index就是索引，item就是当前值
	 			遍历map的时候index表示的就是map的key,item就是map的值
	 		
	 		#{变量}就能取出变量的值也就是当前遍历出的元素
	 	 -->
	 	 <foreach collection="list" item="item_id" separator=","
	 	 	open="(" close=")" index="">
	 	 	#{item_id}
	 	 </foreach>
	 </select>
	 
	 <!-- 批量保存 -->
	 <!-- public void addEmps(@Param("emps")List<Employee> emps); -->
	 <!-- MySql下批量保存：可以foreach遍历    mysql支持values(),(),()语法 -->
	 <!-- <insert id="addEmps">
	 	INSERT INTO `tbl_employee` 
	 	(`last_name`, `gender`, `email`, `d_id`)
	 	VALUES
	 	<foreach collection="emps" item="emp" separator=",">
	 		(#{emp.lastName}, #{emp.gender}, #{emp.email}, #{emp.dept.id})
	 	</foreach>
	 </insert> -->
	 
	 <!-- 这种方式需要数据库连接属性allowMultiQueries=true;
	 	这种分号分隔多个sql可以用于其他的批量操作(删除,修改)
	  -->
	 <insert id="addEmps" databaseId="mysql">
	 	<foreach collection="emps" item="emp" separator=";">
	 		INSERT INTO `tbl_employee` 
		 	(
		 		<!-- 引入外部定义的sql -->
		 		<include refid="insertColumn">
		 			<property name="testColumn" value="asd"/>
		 		</include>
		 	)
		 	VALUES
		 	(#{emp.lastName}, #{emp.gender}, #{emp.email}, #{emp.dept.id})
	 	</foreach>
	 </insert>
	 
	 <!-- Oracle数据库不支持
	 	values (),()...
	 	Oracle支持的批量方式
	 	1、多个insert放在begin - end 下面
		 	begin
		 		inert into  。。。 values 。。。;
		 		inert into  。。。 values 。。。;
		 	end;
		 2、利用中间表：
		 	insert into 。。。
		 		select 。。。 from (
		 			select .. from dual
		 			union
		 			select .. from dual	
		 		)
	  -->
	 <insert id="addEmps" databaseId="oracle">
 		<foreach collection="emps" item="emp" open="begin" close="end;">
 			INSERT INTO `tbl_employee` 
	 		(`last_name`, `gender`, `email`, `d_id`)
	 		VALUES
	 		(#{emp.lastName}, #{emp.gender}, #{emp.email}, #{emp.dept.id});
 		</foreach>
	 </insert>
	 
	 <!-- 
	 	两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数
	 		多个参数：参数会被封装成Map：_parameter就代表这个map
	 	_databaseId:如果配置了DatabaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle或mysql
	  -->
	  <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	  <select id="getEmpsTestInnerParameter" resultType="employee">
	  	<!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
	  	<bind name="_lastName" value="'%'+lastName+'%'"/>
	  	<if test="_databaseId=='mysql'">
	  		select * from tbl_employee 
	  		<if test="_parameter!=null">
	  			where last_name like #{_lastName}
	  		</if>
	  	</if>
	  	<if test="_databaseId=='oracle'">
	  		<if test="_parameter!=null">
	  			where last_name like #{lastName}
	  		</if>
	  	</if>
	  </select>
	  
	  <!-- 
	  	抽取可重用的sql片段。方便后面引用 
	  	1、sql抽取：经常将要查询的列名，或者插入用的列明抽取出来方便引用
	  	2、include来引用已经抽取的sql；
	  	3、include还可以自定义一些property,sql标签内部就能使用自定义的熟悉
	  		include-property取值的正确方式${prop}，
	  		#{不能使用这种方式}
	  	-->
	  <sql id="insertColumn">
	  	<if test="_databaseId=='mysql'">
	  	`last_name`, `gender`, `email`, `d_id`
	  	</if>
	  </sql>
	  
	  <!-- 
	  	1、使用select标签定义调用存储过程
	  	2、statementType="CALLABLE":表示要调用存储过程 
	   -->
	  <select id="getPageByProcedure" statementType="CALLABLE" databaseId="oracle">
	  	{call hello_test(
	  		#{start,mode=IN,jdbctype=INTEGER},
	  		#{end,mode=IN,jdbctype=INTEGER"},
	  		#{count,mode=OUT,jdbctype=INTEGER},
	  		#{end,mode=OUT,jdbctype=CURSOR,javaType=ResultSet,resultMap=PageEmp},
	  	)}
	  </select>
	  <resultMap type="com.atguigu.mybatis.bean.Employee" id="PageEmp">
	  	<id column="AAA_id" property="id"/>
	  	<id column="EMAIL" property="email"/>
	  </resultMap>
	  
	  
</mapper>