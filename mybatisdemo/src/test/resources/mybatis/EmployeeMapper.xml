<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EnployeeMapper">
	<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>
	
	
	<!-- 
		eviction:缓存的回收策略：
			LRU-最近最少使用的：移除最长时间不被使用的对象。
			FIFO-先进先出：按对象进入缓存的顺序来移除它们。
			SOFT-软引用：移除基于垃圾回收器状态和软引用规则的对象
			WEAK-若引用：更积极地移除基于垃圾收集器和弱引用规则的对象。
			默认是LRU。
		flushInterval:缓存刷新间隔
			缓存多长时间清空一次，默认不清空，设置一个毫秒值
		readOnly：是否只读：
			true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
				mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
			false:非只读：mybatis觉得获取的数据可能会被修改。
				mybatis会利用序列化&反序列化的技术克隆一份新的数据给你，安全，速度慢，默认false
		size：缓存存放多少元素；1024
		type="":指定自定义缓存的全类名;
			实现Cache接口即可；
	 -->
<!-- 
namespace:名字空间
id:唯一标识符
resultType:返回值类型
#{id}:从传过来的参数中获取值
 -->
 	<!-- public Map<Integer,Employee> getEmpByLastNameLikeReturnMap(String lastName); -->
 	<select id="getEmpByLastNameLikeReturnMap" resultType="employee" databaseId="mysql">
		select * from tbl_employee where last_name like #{lastName}
	</select>
 	
 	<!-- public Map<String,Object> getEmpByIdReturnMap(Integer id); -->
 	<select id="getEmpByIdReturnMap" resultType="map" databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
 
 	<!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
	<select id="getEmpsByLastNameLike" resultType="employee" databaseId="mysql">
		select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<select id="getEmpById" useCache="true" resultType="employee" databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
	
	<select id="getEmpById" resultType="employee" databaseId="oracle">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- public void addEmp(Employee employee); -->
	<!-- parameterType:可以省略 -->
	<!-- mysql支持自动自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys();
		useGeneratedKeys="true";使用自增主键值策略
		keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性      
	 -->
	<insert id="addEmp"  flushCache="true" parameterType="com.atguigu.mybatis.bean.Employee"
		useGeneratedKeys="true"	keyProperty="id" databaseId="mysql">
		INSERT INTO `tbl_employee` 
		(`last_name`, `gender`, `email`) 
		VALUES 
		(#{lastName},#{gender}, #{email})
	</insert>
	
	<insert id="addEmp"
		databaseId="oracle">
		<!-- 
			selectKey:查出来的主键值封装给javaBean的哪个属性
			order="BEFORE":当前sql在插入sql之前运行
					AFTER:当前sql在插入sql之后运行，获取当前序列值currval
			resultType:查出的数据的返回值类型
			BEFORE运行顺序：
				先运行selectKey查询seq_id值封装给javaBean的id属性
				在运行插入的sql;就可以取出id属性对应的值
			 AFTER运行顺序：
			 	先运行插入sql(从序列中取出新值作为id)；
			 	再运行selectKey查询id的sql；
		 -->
		<selectKey keyProperty="seq_id" order="BEFORE" resultType="Integer" >
			<!-- 编写查询主键的sql语句 -->
			select SEQ.nextval from dual
		</selectKey>
		INSERT INTO `tbl_employee` 
		(`id`,`last_name`, `gender`, `email`) 
		VALUES 
		(#{seq_id},#{lastName},#{gender}, #{email})
	</insert>
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		UPDATE `tbl_employee` 
		SET 
		`last_name`=#{lastName}, 
		`gender`=#{gender}, `email`=#{email}
		WHERE `id`=#{id}
	</update>
	
	<!-- public void deleteEmpById(Employee employee) -->
	<delete id="deleteEmpById">
		delete from tbl_employee where id=#{id}
	</delete>
	
	<!-- public Employee getEmpByMap(Map<String, Object> map); -->
	<select id="getEmpByMap" resultType="employee" databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
	<!-- 
		Spring整合Mybatis
			目的：1、spring管理所有组件。mapper的实现类
				service==>Dao @Autowired:自动注入mapper；
				2、spring用来管理事务，spring声明事物
				
	 -->
</mapper>