<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 
		1.mybatis可以使用properties来引入外部properties配置文件的内容
		resource：引入类路径下的资源
		url：引入网络路径或者磁盘路径下的资源
	 -->
	<properties resource="dbconfig.propertis"></properties>
	
	<!-- 
	
		2.settings包含很多设置项
		setting:用来设置每一个设置项
		  name:设置项名称
		  value:设置项取值
	 -->
	<settings>
			<!-- 开启A_COLUMN 到 aColumn的驼峰映射-->
		 <setting name="mapUnderscoreToCamelCase" value="true"/>
		<!--  <setting name="jdbcTypeForNull" value="NULL"/> -->
		
		<!-- 显示的指定每个我们需要更改配置的值，即使他是默认的。防止版本更新带来的问题 -->
		<setting name="lazyLoadingEnabled" value="true"/><!-- 延迟加载默认false -->
		<setting name="aggressiveLazyLoading" value="false"/><!-- false禁用则按需加载 -->
	</settings>
	
	<!-- 
		3.typeAliases：别名处理器：可以为java类型起别名
		别名不区分大小写
	 -->
	<typeAliases>
		<!--
			typeAlias:为某个java类型起别名
			type:指定要起的类型全类名；如果没有指定,默认别名就是类名小写;employee
			alias:指定新的别名
		  -->
		<!-- <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/> -->
		
		<!-- 
		package:为某个包下的所有类批量起别名
		name:指定包名(为当前包以及下面所有的后代包的每一个类都起一个默认的别名(类名小写))
		 -->
		<package name="com.atguigu.mybatis.bean"/>
		<!--在使用批量包扫描的情况下 使用@Alias注解为某个类型指定新的别名 -->
	</typeAliases>
	
	<!-- 
		4.environments:环境们，mybatis可以配置多种环境，default指定某种环境
			environment：配置一个具体的环境信息：必须有两个标签
				transactionManager：事务管理器
						type：事务管理器类型；JDBC|MANAGED，
							也可以自定义事务管理器；实现TransactionFactory接口，type指定全类名
				dataSource：数据源
						type:数据源类型；UNPOOLED(UnpooledDataSourceFactory)不使用连接池的技术
									|POOLED(PooledDataSourceFactory)使用连接池技术
									|JNDI(JndiDataSourceFactory)
				自定义数据源：实现DataSourceFactory接口，type就是全类名
	 -->
	<environments default="development">
		<environment id="test">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>


	<!-- 
		5.databaseIdProvider:支持多数据厂商的；
		type="DB_VENDOR":VendorDatabaseIdProvider
		作用就是得到数据库厂商的标识(驱动getDatabaseProductName()),mybatis就能识别
		MySQL,Oracle,SQL Server,xxx
	 -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
	</databaseIdProvider>
	
	<!-- 将我们写好的sql映射文件(EmployeeMapper.xml) 一定要注册到全局配置文件(mybatis-config) -->
	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<!-- 将写好的sql映射文件注册到全局配置文件中 -->
	<mappers>
		<!-- 
			mapper:注册一个sql映射
				resource：引用类路径下的sql映射文件
				url:引用网络路径或者磁盘路径下的sql映射文件
				注册接口
				class:引用(注册)接口
					1、有sql映射文件，映射文件必须与接口同名并且放在同一个目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上；
					推荐:比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要的，简单的Dao接口为了开发快速可以使用注解
		 -->
		<mapper resource="mybatis/DepartmentMapper.xml" />
		<mapper resource="mybatis/EmployeeMapper.xml" />
		<mapper resource="mybatis/EmployeeMapperPlus.xml" />
		<mapper resource="mybatis/EmployeeMapperDynamicSQL.xml" />
		<!-- <mapper class="com.atguigu.mybatis.dao.EnployeeMapperAnnotation"/> -->
		<!-- 批量注册，对应的接口名和xml都能扫描到的位置才行 -->
		<!-- <package name="com.atguigu.mybatis.dao"/> -->
	</mappers>
</configuration>